// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: valuation/v1/good.proto

package valuation

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GoodInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GoodInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GoodInfoMultiError, or nil
// if none found.
func (m *GoodInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 0 {

		if m.GetId() <= 0 {
			err := GoodInfoValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := GoodInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 10 {
		err := GoodInfoValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUnit()); l < 1 || l > 10 {
		err := GoodInfoValidationError{
			field:  "Unit",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() < 0 {
		err := GoodInfoValidationError{
			field:  "Price",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTariff() < 0 {
		err := GoodInfoValidationError{
			field:  "Tariff",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAlias() != "" {

		if utf8.RuneCountInString(m.GetAlias()) < 1 {
			err := GoodInfoValidationError{
				field:  "Alias",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GoodInfoMultiError(errors)
	}

	return nil
}

// GoodInfoMultiError is an error wrapping multiple validation errors returned
// by GoodInfo.ValidateAll() if the designated constraints aren't met.
type GoodInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodInfoMultiError) AllErrors() []error { return m }

// GoodInfoValidationError is the validation error returned by
// GoodInfo.Validate if the designated constraints aren't met.
type GoodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodInfoValidationError) ErrorName() string { return "GoodInfoValidationError" }

// Error satisfies the builtin error interface
func (e GoodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodInfoValidationError{}

// Validate checks the field values on CreateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGoodsRequestMultiError, or nil if none found.
func (m *CreateGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := CreateGoodsRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 10 {
		err := CreateGoodsRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUnit()); l < 1 || l > 10 {
		err := CreateGoodsRequestValidationError{
			field:  "Unit",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() < 0 {
		err := CreateGoodsRequestValidationError{
			field:  "Price",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTariff() < 0 {
		err := CreateGoodsRequestValidationError{
			field:  "Tariff",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateGoodsRequestMultiError(errors)
	}

	return nil
}

// CreateGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGoodsRequestMultiError) AllErrors() []error { return m }

// CreateGoodsRequestValidationError is the validation error returned by
// CreateGoodsRequest.Validate if the designated constraints aren't met.
type CreateGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGoodsRequestValidationError) ErrorName() string {
	return "CreateGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGoodsRequestValidationError{}

// Validate checks the field values on CreateGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGoodsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGoodsReplyMultiError, or nil if none found.
func (m *CreateGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateGoodsReplyMultiError(errors)
	}

	return nil
}

// CreateGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGoodsReplyMultiError) AllErrors() []error { return m }

// CreateGoodsReplyValidationError is the validation error returned by
// CreateGoodsReply.Validate if the designated constraints aren't met.
type CreateGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGoodsReplyValidationError) ErrorName() string { return "CreateGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGoodsReplyValidationError{}

// Validate checks the field values on UpdateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGoodsRequestMultiError, or nil if none found.
func (m *UpdateGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGood()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGoodsRequestValidationError{
					field:  "Good",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGoodsRequestValidationError{
					field:  "Good",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGood()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGoodsRequestValidationError{
				field:  "Good",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGoodsRequestMultiError(errors)
	}

	return nil
}

// UpdateGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGoodsRequestMultiError) AllErrors() []error { return m }

// UpdateGoodsRequestValidationError is the validation error returned by
// UpdateGoodsRequest.Validate if the designated constraints aren't met.
type UpdateGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGoodsRequestValidationError) ErrorName() string {
	return "UpdateGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGoodsRequestValidationError{}

// Validate checks the field values on UpdateGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGoodsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGoodsReplyMultiError, or nil if none found.
func (m *UpdateGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGoodsReplyMultiError(errors)
	}

	return nil
}

// UpdateGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGoodsReplyMultiError) AllErrors() []error { return m }

// UpdateGoodsReplyValidationError is the validation error returned by
// UpdateGoodsReply.Validate if the designated constraints aren't met.
type UpdateGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGoodsReplyValidationError) ErrorName() string { return "UpdateGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGoodsReplyValidationError{}

// Validate checks the field values on DeleteGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGoodsRequestMultiError, or nil if none found.
func (m *DeleteGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGoodsRequestMultiError(errors)
	}

	return nil
}

// DeleteGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGoodsRequestMultiError) AllErrors() []error { return m }

// DeleteGoodsRequestValidationError is the validation error returned by
// DeleteGoodsRequest.Validate if the designated constraints aren't met.
type DeleteGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGoodsRequestValidationError) ErrorName() string {
	return "DeleteGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGoodsRequestValidationError{}

// Validate checks the field values on DeleteGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGoodsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGoodsReplyMultiError, or nil if none found.
func (m *DeleteGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGoodsReplyMultiError(errors)
	}

	return nil
}

// DeleteGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGoodsReplyMultiError) AllErrors() []error { return m }

// DeleteGoodsReplyValidationError is the validation error returned by
// DeleteGoodsReply.Validate if the designated constraints aren't met.
type DeleteGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGoodsReplyValidationError) ErrorName() string { return "DeleteGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGoodsReplyValidationError{}

// Validate checks the field values on GetGoodsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGoodsRequestMultiError, or nil if none found.
func (m *GetGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGoodsRequestMultiError(errors)
	}

	return nil
}

// GetGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by GetGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGoodsRequestMultiError) AllErrors() []error { return m }

// GetGoodsRequestValidationError is the validation error returned by
// GetGoodsRequest.Validate if the designated constraints aren't met.
type GetGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGoodsRequestValidationError) ErrorName() string { return "GetGoodsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGoodsRequestValidationError{}

// Validate checks the field values on GetGoodsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGoodsReplyMultiError, or
// nil if none found.
func (m *GetGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGoodsReplyMultiError(errors)
	}

	return nil
}

// GetGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by GetGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type GetGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGoodsReplyMultiError) AllErrors() []error { return m }

// GetGoodsReplyValidationError is the validation error returned by
// GetGoodsReply.Validate if the designated constraints aren't met.
type GetGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGoodsReplyValidationError) ErrorName() string { return "GetGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGoodsReplyValidationError{}

// Validate checks the field values on ListGoodsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGoodsRequestMultiError, or nil if none found.
func (m *ListGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := ListGoodsRequestValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListGoodsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGoodsRequestMultiError(errors)
	}

	return nil
}

// ListGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by ListGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGoodsRequestMultiError) AllErrors() []error { return m }

// ListGoodsRequestValidationError is the validation error returned by
// ListGoodsRequest.Validate if the designated constraints aren't met.
type ListGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGoodsRequestValidationError) ErrorName() string { return "ListGoodsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGoodsRequestValidationError{}

// Validate checks the field values on ListGoodsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGoodsReplyMultiError,
// or nil if none found.
func (m *ListGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGoodsReplyValidationError{
						field:  fmt.Sprintf("DataList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGoodsReplyValidationError{
						field:  fmt.Sprintf("DataList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGoodsReplyValidationError{
					field:  fmt.Sprintf("DataList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListGoodsReplyMultiError(errors)
	}

	return nil
}

// ListGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by ListGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type ListGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGoodsReplyMultiError) AllErrors() []error { return m }

// ListGoodsReplyValidationError is the validation error returned by
// ListGoodsReply.Validate if the designated constraints aren't met.
type ListGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGoodsReplyValidationError) ErrorName() string { return "ListGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGoodsReplyValidationError{}

// Validate checks the field values on ListGoodsByWordsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGoodsByWordsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGoodsByWordsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGoodsByWordsReplyMultiError, or nil if none found.
func (m *ListGoodsByWordsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGoodsByWordsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGoods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGoodsByWordsReplyValidationError{
						field:  fmt.Sprintf("Goods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGoodsByWordsReplyValidationError{
						field:  fmt.Sprintf("Goods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGoodsByWordsReplyValidationError{
					field:  fmt.Sprintf("Goods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGoodsByWordsReplyMultiError(errors)
	}

	return nil
}

// ListGoodsByWordsReplyMultiError is an error wrapping multiple validation
// errors returned by ListGoodsByWordsReply.ValidateAll() if the designated
// constraints aren't met.
type ListGoodsByWordsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGoodsByWordsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGoodsByWordsReplyMultiError) AllErrors() []error { return m }

// ListGoodsByWordsReplyValidationError is the validation error returned by
// ListGoodsByWordsReply.Validate if the designated constraints aren't met.
type ListGoodsByWordsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGoodsByWordsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGoodsByWordsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGoodsByWordsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGoodsByWordsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGoodsByWordsReplyValidationError) ErrorName() string {
	return "ListGoodsByWordsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGoodsByWordsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGoodsByWordsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGoodsByWordsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGoodsByWordsReplyValidationError{}

// Validate checks the field values on ListGoodsByWordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGoodsByWordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGoodsByWordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGoodsByWordsRequestMultiError, or nil if none found.
func (m *ListGoodsByWordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGoodsByWordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Words

	if len(errors) > 0 {
		return ListGoodsByWordsRequestMultiError(errors)
	}

	return nil
}

// ListGoodsByWordsRequestMultiError is an error wrapping multiple validation
// errors returned by ListGoodsByWordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGoodsByWordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGoodsByWordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGoodsByWordsRequestMultiError) AllErrors() []error { return m }

// ListGoodsByWordsRequestValidationError is the validation error returned by
// ListGoodsByWordsRequest.Validate if the designated constraints aren't met.
type ListGoodsByWordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGoodsByWordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGoodsByWordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGoodsByWordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGoodsByWordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGoodsByWordsRequestValidationError) ErrorName() string {
	return "ListGoodsByWordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGoodsByWordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGoodsByWordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGoodsByWordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGoodsByWordsRequestValidationError{}
